#+TITLE: GNU Emacs Config
#+AUTHOR: Yeonho Jang
#+DESCRIPTION: My Personal Emacs setting
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#eldoc][Eldoc]]
  - [[#enable-elpaka][Enable Elpaka]]
  - [[#eldoc-1][Eldoc]]
  - [[#general-keybindings][General Keybindings]]
  - [[#back-파일-및-임시파일-이동][Back 파일 및 임시파일 이동]]
- [[#diminish][Diminish]]
- [[#all-icons][All Icons]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting The Font Face]]
  - [[#zooming-in-and-out][Zooming in and out]]
- [[#color-scheme][Color Scheme]]
- [[#gui-setup][GUI setup]]
  - [[#disable-menubar-toolbars-scrollbar][Disable Menubar, toolbars, scrollbar]]
  - [[#display-line-numbers-and-truncated-lines][Display Line numbers and Truncated Lines]]
  - [[#dashboard][Dashboard]]
- [[#org-mode][ORG mode]]
  - [[#toc][TOC]]
  - [[#org-bullet][ORG Bullet]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#scheduling][Scheduling]]
  - [[#ob-mermaid][ob mermaid]]
  - [[#org-roam][ORG-ROAM]]
- [[#which-key][WHICH KEY]]
- [[#프로그래밍-지원][프로그래밍 지원]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#flycheck][FlyCheck]]
  - [[#company][Company]]
  - [[#ivy][IVY]]
  - [[#git-magit][Git (Magit)]]
  - [[#markdown][Markdown]]
  - [[#hide-show-mode][Hide Show mode]]
  - [[#jsonrpc][JsonRPC]]
  - [[#eglot][Eglot]]
- [[#프로그래밍-언어][프로그래밍 언어]]
  - [[#common-lisp][Common Lisp]]
  - [[#c][C++]]
  - [[#d-lang][D-lang]]
  - [[#rust--rust-mode][Rust  (RUST mode)]]
  - [[#pascal-fpc][PASCAL (FPC)]]
- [[#기타][기타]]
  - [[#backup-및-임시파일-경로-수정][Backup 및 임시파일 경로 수정]]
  - [[#sudo-edit][Sudo Edit]]
  - [[#exec-path-from-shell][Exec Path from shell]]
  - [[#android-tramp-설정][Android Tramp 설정]]
  - [[#odin][ODIN]]
  - [[#ollama][Ollama]]

* IMPORTANT PROGRAMS TO LOAD FIRST

** Elpaca Package Manager

#+BEGIN_SRC emacs-lisp
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1 :inherit ignore
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						    ,@(when-let* ((depth (plist-get order :depth)))
							(list (format "--depth=%d" depth) "--no-single-branch"))
						    ,(plist-get order :repo) ,repo))))
		    ((zerop (call-process "git" nil buffer t "checkout"
					  (or (plist-get order :ref) "--"))))
		    (emacs (concat invocation-directory invocation-name))
		    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					  "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		    ((require 'elpaca))
		    ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+END_SRC


** Eldoc

#+BEGIN_SRC emacs-lisp
;  (unload-feature 'eldoc t)
;  (setq custom-delayed-init-variables '())
;  (defvar global-eldoc-mode nil)
;  (elpaca eldoc
;    (require 'eldoc)
;    (global-eldoc-mode)
;    (provide 'eldoc))
#+END_SRC


** Enable Elpaka

#+BEGIN_SRC emacs-lisp

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default 1))

  (elpaca-wait)

  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

#+END_SRC

** Eldoc

#+BEGIN_SRC emacs-lisp
  (unload-feature 'eldoc t)
  (setq custom-delayed-init-variables '())
  (defvar global-eldoc-mode nil)
  (elpaca eldoc
    (require 'eldoc)
    (global-eldoc-mode)
    (provide 'eldoc))
#+END_SRC


** General Keybindings

#+BEGIN_SRC emacs-lisp

  ;;(use-package general
  ;;  :config
  ;;  )

#+END_SRC

** Back 파일 및 임시파일 이동 
#+BEGIN_SRC emacs-lisp
  (let ((backup-dir "~/tmp/emacs/backups")
        (auto-saves-dir "~/tmp/emacs/auto-saves/"))
    (dolist (dir (list backup-dir auto-saves-dir))
      (when (not (file-directory-p dir))
        (make-directory dir t)))
    (setq backup-directory-alist `(("." . ,backup-dir))
          auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
          auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
          tramp-backup-directory-alist `((".*" . ,backup-dir))
          tramp-auto-save-directory auto-saves-dir))

  (setq backup-by-copying t    ; Don't delink hardlinks
        delete-old-versions t  ; Clean up the backups
        version-control t      ; Use version numbers on backups,
        kept-new-versions 5    ; keep some new versions
        kept-old-versions 2)   ; and some old ones, too

#+END_SRC
* Diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

* All Icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
  
#+END_SRC

* FONTS

** Setting The Font Face

#+BEGIN_SRC emacs-lisp

  (set-language-environment "Korean")
  (prefer-coding-system 'utf-8)

  (when (or (eq system-type 'gnu/linux)
	    (eq system-type 'darwin))
    ;; defult Latin font :face
    (set-face-attribute 'default nil :family "Hack")
    (set-face-attribute 'default nil :height 120)
    (set-fontset-font t 'hangul (font-spec :name "D2Coding")))

  ;; 한글과 영문의 폰트 스케일 맞추기 - orgmode 테이블 깨지지않게하기
  (setq face-font-rescale-alist 
	'((".*hiragino.*" . 1.2)
	  ("D2Coding" . 1.2307692307692308)))


#+END_SRC



** Zooming in and out

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
  
#+END_SRC

* Color Scheme
#+BEGIN_SRC emacs-lisp

  (add-to-list 'custom-theme-load-path "~/doc/emacs/themes")
  ;;(load-theme 'dracula t)
  ;;(load-theme 'nimbus t)
  (load-theme 'zenburn t)

#+END_SRC




* GUI setup

** Disable Menubar, toolbars, scrollbar

#+BEGIN_SRC emacs-lisp

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  
#+END_SRC

** Display Line numbers and Truncated Lines

#+BEGIN_SRC emacs-lisp

  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

#+END_SRC


** Dashboard

#+BEGIN_SRC emacs-lisp

  (use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner ;; "~/.config/emacs/images/dtmacs-logo.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom 
  (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))


#+END_SRC

* ORG mode

** TOC

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

** ORG Bullet

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Disable Electric Indent

#+BEGIN_SRC emacs-lisp
  (electric-indent-mode -1)
#+END_SRc


** Scheduling
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :config 
    (setq org-agenda-files (list "~/doc/org/agenda.org" "~/doc/org/game_project.org"))
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)))

#+END_SRC

** ob mermaid 
#+BEGIN_SRC emacs-lisp
  (use-package ob-mermaid
    :ensure t
    :config
    (setq ob-mermaid-cli-path "~/.local/bin/mmdc")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((mermaid . t)
       (scheme . t)
       (lisp . t)
       (emacs-lisp . t))))
#+END_SRC

** ORG-ROAM

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    (setq ob-mermaid-cli-path "/usr/local/bin/mmdc")

    :custom 
    (org-roam-directory "~/doc/org-roam")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode))
#+END_SRC

* WHICH KEY

#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	    which-key-sort-order #'which-key-key-order-alpha
	    which-key-sort-uppercase-first nil
	    which-key-add-column-padding 1
	    which-key-max-display-columns nil
	    which-key-min-display-lines 6
	    which-key-side-window-slot -10
	    which-key-side-window-max-height 0.25
	    which-key-idle-delay 0.8
	    which-key-max-description-length 25
	    which-key-allow-imprecise-window-fit t
	    which-key-separator " → " ))

#+END_SRC


* 프로그래밍 지원

** Rainbow Mode

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook 
    ((org-mode prog-mode) . rainbow-mode))
#+END_SRC

** FlyCheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))

  (use-package flycheck-dmd-dub
    :ensure 
    ( :package "flycheck-dmd-dub"
      :repo "atilaneves/flycheck-dmd-dub"
      :fetcher github
      :source "MELPA")
    :hook
    (d-mode . flycheck-dmd-dub-set-variables)
    )
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :ensure t
    :after company
    :diminish
    :hook (company-mode . company-box-mode))

#+END_SRC

** IVY

#+BEGIN_SRC emacs-lisp
  (use-package counsel
        :ensure t
        :after ivy
        :config (counsel-mode))

  (use-package ivy
        :ensure t
        :diminish
        :bind
        ;; ivy-resume resumes the last Ivy-based completion.
        (("C-c C-r" . ivy-resume)
         ("C-x B" . ivy-switch-buffer-other-window))
        :config
        (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1)
    :custom 
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev))
#+END_SRC

** Git (Magit)

#+BEGIN_SRC emacs-lisp
  ;;(use-package magit-section 
  ;;  :ensure t)

  (use-package magit
  :ensure t
  :commands (magit-status)
  :bind (("C-x g" . magit-status))
  :config
  (setf (alist-get 'unpushed magit-section-initial-visibility-alist) 'show))


  (use-package transient
    :ensure t
    :after magit)
#+END_SRC

#+RESULTS:
: [nil 26768 3830 347673 nil elpaca-process-queues nil nil 0 nil]

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (use-package mermaid-mode :ensure t
    :after markdown-mode
    )

  ;; markdown -> org 기능
  (defun markdown-convert-buffer-to-org ()
      "Convert the current buffer's content from markdown to orgmode format and save it with the current buffer's file name but with .org extension."
      (interactive)
      (shell-command-on-region (point-min) (point-max)
                               (format "pandoc -f markdown -t org -o %s"
                                       (concat (file-name-sans-extension (buffer-file-name)) ".org"))))
#+END_SRC


** Hide Show mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC




** JsonRPC
#+BEGIN_SRC emacs-lisp
  (use-package jsonrpc
    :ensure t)
#+END_SRC

** Eglot
#+BEGIN_SRC emacs-lisp

  (use-package eglot
    ;;:ensure (:inherit elpaca-menu-gnu-devel-elpa)
    :ensure nil
    :demand t
    :after (jsonrpc)
    :hook
    (((c-mode c-ts-mode c++-mode c++-ts-mode c-or-c++-mode c-or-c++-ts-mode) . eglot-ensure)
     (d-mode . eglot-ensure))
    :config 
    (add-to-list 'eglot-server-programs '((c-mode c-ts-mode c++-mode c++-ts-mode c-or-c++-mode c-or-c++-ts-mode) . ("ccls" "--init"
  														  "{\"clang\": {
          \"extraArgs\": [
            \"-isystem/usr/local/include\", 
            \"-isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/15.0.0/include\", 
            \"-isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include\",
            \"-isystem/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include\", 
            \"-isystem/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks\"
          ],
          \"resourceDir\": \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/15.0.0\"
        }
      }")))
    (add-to-list 'eglot-server-programs '(d-mode . ("serve-d")))
    (add-to-list 'eglot-server-programs '((odin-mode odin-ts-mode) . ("ols"))))

  (elpaca-wait)
#+END_SRC

* 프로그래밍 언어

** Common Lisp

#+BEGIN_SRC emacs-lisp
  ;; Common Lisp 로딩
  (use-package slime 
    :ensure t
    :init
    (load (expand-file-name "~/quicklisp/slime-helper.el")))

  ;; (use-package slime-autoloads :ensure t)


  (setq inferior-lisp-program
        (cond ((eq system-type 'gnu/linux) "/usr/bin/sbcl")
              ((eq system-type 'darwin) "/usr/local/bin/sbcl")))


  (add-hook 'lisp-mode-hook #'paredit-mode)
  (add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
  (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))

  ;; hyper spec
  (load (expand-file-name "~/quicklisp/clhs-use-local.el") 'noerror)
  ;; (setq common-lisp-hyperspec-root
  ;;      (concat "file://" (expand-file-name "~/doc/common-lisp/HyperSpec/")))

  (setq browse-url-handlers '(("http://lispworks.com" . eww-browse-url)
                              ("file://" . eww-browse-url)
                              ("" . browse-url-default-browser)))

  (use-package ac-slime
    :ensure t
    :config
    (add-hook 'slime-mode-hook 'set-up-slime-ac)
    (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
    (eval-after-load "auto-complete"
      '(add-to-list 'ac-modes 'slime-repl-mode)))

  (provide 'prelude-lisp)

#+END_SRC


** C++

#+BEGIN_SRC emacs-lisp

  (use-package ccls
      :ensure t )

#+END_SRC


** D-lang
#+BEGIN_SRC emacs-lisp
  (use-package d-mode
    :ensure t
    :hook (d-mode . company-mode)
    )

  (use-package company-dcd 
    :ensure t
    :after d-mode
    :hook (d-mode . company-dcd-mode))
#+END_SRC



** Rust  (RUST mode)
#+BEGIN_SRC emacs-lisp

  (use-package rust-mode
    :ensure t
    :after eglot
    :init
    (setq rust-mode-treesitter-derive t)
    (setq rust-rustfmt-bin (expand-file-name "~/.cargo/bin/rustfmt")
          rust-cargo-bin (expand-file-name "~/.cargo/bin/cargo"))
    (add-to-list 'eglot-server-programs `((rust-mode rust-ts-mode) . (,(expand-file-name "~/.local/bin/rust-analyzer"))))
    (setq rust-format-on-save t)
    (add-hook 'rust-mode-hook
              (lambda () (prettify-symbols-mode)))
    (add-hook 'rust-mode-hook
              (lambda () (setq indent-tabs-mode nil
                               tab-width 4
                               c-basic-offset 4
                               fill-column 120)))
    :hook 
    (((rust-mode rust-ts-mode) . company-mode)
     ((rust-mode rust-ts-mode) . eglot-ensure)))

#+END_SRC

** PASCAL (FPC)
#+BEGIN_SRC emacs-lisp
  (use-package opascal-mode
    :ensure nil
    :after eglot
    :init
    (add-to-list 'auto-mode-alist
                 '("\\.\\(pas\\|pp\\|lpr\\|dpr\\)\\'" . opascal-mode))
    (add-to-list 'eglot-server-programs `((pascal-mode delphi-mode opascal-mode) . (,(expand-file-name "~/.local/bin/pasls") 
                                                                                    :initializationOptions (:PP "~/.local/fpcupdeluxe/fpc/bin/aarch64-darwin/fpc.sh"
                                                                                                                :FPCDIR ,(expand-file-name "~/.local/fpcupdeluxe/fpsrc")
                                                                                                                :LAZARUSDIR ,(expand-file-name "~/.local/fpcupdeluxe/lazarus")
                                                                                                                :FPCTARGET "aarch64-darwin"
                                                                                                                :FPCTARGETCPU "aarch64"))))
    ;; (tree-sitter-require 'opascal)
    :hook
    ((opascal-mode . company-mode)
     (opascal-mode . tree-sitter-mode)
     (opascal-mode . eglot-ensure)))
#+END_SRC

* 기타


** Backup 및 임시파일 경로 수정

#+BEGIN_SRC emacs-lisp

  (defun yhj/backup-file-name (fpath)
    "Return a new file path of a given file path.
  If the new path's directories does not exist, create them."
    (let* ((backupRootDir "~/.emacs.d/emacs-backup/")
	   (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path
	   (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") )))
      (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
      backupFilePath))
  (setq make-backup-file-name-function 'yhj/backup-file-name)

#+END_SRC

** Sudo Edit

#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+END_SRC

** Exec Path from shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config 
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC

** Android Tramp 설정
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure t
    :config
    (connection-local-set-profile-variables
     'tramp-connection-local-termux-profile
     `((tramp-remote-path
        . ,(mapcar
            (lambda (x)
              (if (stringp x) (concat "/data/data/com.termux/files" x) x))
            (copy-tree tramp-remote-path)))))

    (connection-local-set-profiles
     '(:application tramp :machine "192.168.196.169")
     'tramp-connection-local-termux-profile)


    (add-to-list 'tramp-connection-properties
                 (list (regexp-quote "android") "remote-shell" "sh"))
    (add-to-list 'tramp-connection-properties
                 (list (regexp-quote "android")
                       "tmpdir" "/data/data/com.termux/files/home/tmp"))
    (connection-local-set-profiles
     '(:application tramp :machine "android")
     'tramp-connection-local-termux-profile))
#+END_SRC

** ODIN
*** Odin Mode


#+begin_src emacs-lisp
  ;; Enable odin-mode and configure OLS as the language server
  (use-package odin-mode
    :after eglot
    :ensure (:host github :repo "mattt-b/odin-mode")
    :mode ("\\.odin\\'" . odin-mode)
    :hook (odin-mode . eglot-ensure))


  ;; Add OLS to the list of available programs
  ;; NOTE: As of Emacs 30, this is not needed.
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs '((odin-mode odin-ts-mode) . ("ols"))))

#+end_src
** Ollama

#+BEGIN_SRC emacs-lisp
  (use-package ellama
    :ensure t
    :init
    (require 'llm-ollama)
    (setopt ellama-language "English")
    (setopt ellama-provider
  		  (make-llm-ollama
  		   :chat-model "codellama" :embedding-model "codellama")))

#+END_SRC
